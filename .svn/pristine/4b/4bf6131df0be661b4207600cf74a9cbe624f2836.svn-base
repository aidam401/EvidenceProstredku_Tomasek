package perzistence;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Iterator;
import kolekce.LinSeznam;
import prostredky.Barva;
import prostredky.Dodavka;
import prostredky.DopravniProstredek;
import prostredky.NakladniAutomobil;
import prostredky.OsobniAutomobil;
import prostredky.Traktor;

/**
 *
 * @author Adam_Tomasek
 */
public final class PerzistenceLib {

    private static void vypisException(String mess) {
        System.out.println("\u001B[31m" + mess + "\u001B[0m");
    }

    private PerzistenceLib() {
    }

    private static String seznamNaText(LinSeznam<DopravniProstredek> seznam) {
        String output = "";
        Iterator<DopravniProstredek> iterator = seznam.iterator();

        while (iterator.hasNext()) {
            DopravniProstredek prostredek = iterator.next();
            String text = prostredek.toString();

            for (String elem : text.split(",")) {

                output += elem.split("=")[1] + ",";
            }
            output += ";\n";

        }
        return output;
    }

    private static LinSeznam<DopravniProstredek> textNaSeznam(String text) {

        LinSeznam<DopravniProstredek> seznam = new LinSeznam<>();

        for (String radek : text.split(";")) {
            String radekArr[] = radek.split(",");

            switch (radekArr[0]) {
                case "dodávka":
                    seznam.vlozNaKonec(new Dodavka(radekArr[1],
                            Integer.parseInt(radekArr[3]),
                            Double.parseDouble(radekArr[2])));
                    break;
                case "traktor":
                    seznam.vlozNaKonec(new Traktor(radekArr[1],
                            Integer.parseInt(radekArr[3]),
                            Double.parseDouble(radekArr[2])));
                    break;
                case "truck":
                    seznam.vlozNaKonec(new NakladniAutomobil(radekArr[1],
                            Integer.parseInt(radekArr[3]),
                            Double.parseDouble(radekArr[2])));
                    break;
                case "osobní auto":

                    Barva barva = null;
                    for (Barva br : Barva.values()) {
                        if (br.toString().equals(radekArr[3])) {
                            barva = br;
                        }

                    }
                    seznam.vlozNaKonec(new OsobniAutomobil(radekArr[1], barva,
                            Integer.parseInt(radekArr[4]),
                            Double.parseDouble(radekArr[2])));
            }
        }
        return seznam;
    }

    private static String vygenerujSoubor(String cesta) {
        File soubor = new File(cesta.toString());

        try {
            if (soubor.createNewFile()) {
                System.out.println("Nový soubor vegenerován");
            }
        } catch (IOException e) {
            vypisException("Ve vytváření souboru nastala chyba - "
                    + e.getMessage());

        }
        return soubor.getAbsolutePath();

    }

    public static void ulozText(LinSeznam<DopravniProstredek> seznam) {
        String text = seznamNaText(seznam);
        String cesta = vygenerujSoubor("src/perzistence/zalohy/txtZaloha.txt");

        try {
            FileWriter writer = new FileWriter(cesta);
            writer.write(text);
            writer.close();
        } catch (IOException e) {
            vypisException("V ukládání nastala chyba - " + e.getMessage());
        }
    }

    public static LinSeznam<DopravniProstredek> nactiText() {
        String cesta = "src/perzistence/zalohy/txtZaloha.txt";
        String text = "";
        try {
            FileReader reader = new FileReader(cesta);
            BufferedReader stream = new BufferedReader(reader);
            String radek;
            while ((radek = stream.readLine()) != null) {
                text += radek;
            }

            reader.close();
        } catch (IOException e) {
            vypisException("V načítání nastala chyba - " + e.getMessage());
        }
        return textNaSeznam(text);
    }

    public static void ulozBin(LinSeznam<DopravniProstredek> seznam) {
        String cesta = vygenerujSoubor("src/perzistence/zalohy/zaloha.bin");

        Iterator iterator = seznam.iterator();

        try {
            ObjectOutputStream stream = new ObjectOutputStream(
                    new FileOutputStream(cesta));
            stream.writeInt(seznam.size());
            while (iterator.hasNext()) {
                stream.writeObject(iterator.next());
            }
            stream.close();
        } catch (IOException e) {
            vypisException("V ukládání nastala chyba - " + e.getMessage());
        }
    }

    public static LinSeznam<DopravniProstredek> nactiBin() {
        String cesta = "src/perzistence/zalohy/zaloha.bin";
        LinSeznam<DopravniProstredek> seznam = new LinSeznam();
        try {
            ObjectInputStream stream = new ObjectInputStream(
                    new FileInputStream(cesta));
            int pocet = stream.readInt();
            for (int i = 0; i < pocet; i++) {
                seznam.vlozNaKonec((DopravniProstredek) stream.readObject());
            }
            stream.close();

        } catch (IOException | ClassNotFoundException e) {
            vypisException("V načítání nastala chyba - " + e.getMessage());
        }
        return seznam;
    }
}
