package perzistence;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Iterator;
import kolekce.LinSeznam;
import kolekce.Seznam;
import prostredky.Barva;
import prostredky.Dodavka;
import prostredky.DopravniProstredek;
import prostredky.NakladniAutomobil;
import prostredky.OsobniAutomobil;
import prostredky.Traktor;

/**
 *
 * @author Adam_Tomasek
 */
public final class PerzistenceLib {

    private static void vypisException(String mess) {
        System.out.println("\u001B[31m" + mess + "\u001B[0m");
    }

    private PerzistenceLib() {
    }

    private static String seznamNaText(LinSeznam<DopravniProstredek> seznam) {
        String output = "";
        Iterator<DopravniProstredek> iterator = seznam.iterator();

        while (iterator.hasNext()) {
            DopravniProstredek prostredek = iterator.next();
            String text = prostredek.toString();

            for (String elem : text.split(",")) {

                output += elem.split("=")[1] + ",";
            }
            output += ";\n";

        }
        return output;
    }

    private static LinSeznam<DopravniProstredek> textNaSeznam(String text) {

        LinSeznam<DopravniProstredek> seznam = new LinSeznam<>();

        for (String radek : text.split(";")) {
            String radekArr[] = radek.split(",");

            switch (radekArr[0]) {
                case "dodávka":
                    seznam.vlozNaKonec(new Dodavka(radekArr[1],
                            Integer.parseInt(radekArr[3]),
                            Double.parseDouble(radekArr[2])));
                    break;
                case "traktor":
                    seznam.vlozNaKonec(new Traktor(radekArr[1],
                            Integer.parseInt(radekArr[3]),
                            Double.parseDouble(radekArr[2])));
                    break;
                case "nákladní automobil":
                    seznam.vlozNaKonec(new NakladniAutomobil(radekArr[1],
                            Integer.parseInt(radekArr[3]),
                            Double.parseDouble(radekArr[2])));
                    break;
                case "osobní automobil":

                    Barva barva = null;
                    for (Barva br : Barva.values()) {
                        if (br.toString().equals(radekArr[3])) {
                            barva = br;
                        }

                    }
                    seznam.vlozNaKonec(new OsobniAutomobil(radekArr[1], barva,
                            Integer.parseInt(radekArr[4]),
                            Double.parseDouble(radekArr[2])));
            }
        }
        return seznam;
    }

    private static String vygenerujSoubor(String cesta) throws IOException {
        File soubor = new File(cesta.toString());

        if (soubor.createNewFile()) {
            System.out.println("Nový soubor vegenerován");
        }

        return soubor.getAbsolutePath();

    }

    public static void ulozText(LinSeznam<DopravniProstredek> seznam,
            String cesta) throws IOException {
        //"zalohy/txtZaloha.txt"
        String text = seznamNaText(seznam);
        vygenerujSoubor(cesta);

        try {
            FileWriter writer = new FileWriter(cesta);
            writer.write(text);
            writer.close();
        } catch (IOException e) {
            vypisException("V ukládání nastala chyba - " + e.getMessage());
        }
    }

    public static LinSeznam<DopravniProstredek> nactiText(String cesta) 
            throws FileNotFoundException, IOException {
        String text = "";

        FileReader reader = new FileReader(cesta);
        BufferedReader stream = new BufferedReader(reader);
        String radek;
        while ((radek = stream.readLine()) != null) {
            text += radek;
        }
       
        reader.close();

        return textNaSeznam(text);
    }

    public static void ulozBin(String cesta, Seznam<DopravniProstredek> seznam) 
            throws IOException {
        vygenerujSoubor(cesta);

        Iterator iterator = seznam.iterator();

        ObjectOutputStream stream = new ObjectOutputStream(
                new FileOutputStream(cesta));
        stream.writeInt(seznam.size());
        while (iterator.hasNext()) {
            stream.writeObject(iterator.next());
        }
        stream.close();

    }

    public static LinSeznam<DopravniProstredek> nactiBin(String cesta) 
            throws IOException, ClassNotFoundException {
        //zalohy/zaloha.bin
        LinSeznam<DopravniProstredek> seznam = new LinSeznam();

        ObjectInputStream stream = new ObjectInputStream(
                new FileInputStream(cesta));
        int pocet = stream.readInt();
        for (int i = 0; i < pocet; i++) {
            seznam.vlozNaKonec((DopravniProstredek) stream.readObject());
        }
        stream.close();

        return seznam;
    }
}
